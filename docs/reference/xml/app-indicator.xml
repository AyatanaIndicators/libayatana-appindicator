<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
]>
<refentry id="libappindicator-app-indicator">
<refmeta>
<refentrytitle role="top_of_page" id="libappindicator-app-indicator.top_of_page">AppIndicator</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  LIBAPPINDICATOR Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>AppIndicator</refname>
<refpurpose>An object to put application information
                    into the panel.</refpurpose>
</refnamediv>
<refsect1 id="libappindicator-app-indicator.stability-level">
<title>Stability Level</title>
Unstable, unless otherwise indicated
</refsect1>

<refsynopsisdiv id="libappindicator-app-indicator.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="AppIndicator"/>
<synopsis>
#include &lt;libappindicator/app-indicator.h&gt;

#define             <link linkend="APP-INDICATOR-TYPE:CAPS">APP_INDICATOR_TYPE</link>
#define             <link linkend="APP-INDICATOR:CAPS">APP_INDICATOR</link>                       (obj)
#define             <link linkend="APP-INDICATOR-CLASS:CAPS">APP_INDICATOR_CLASS</link>                 (klass)
#define             <link linkend="IS-APP-INDICATOR:CAPS">IS_APP_INDICATOR</link>                    (obj)
#define             <link linkend="IS-APP-INDICATOR-CLASS:CAPS">IS_APP_INDICATOR_CLASS</link>              (klass)
#define             <link linkend="APP-INDICATOR-GET-CLASS:CAPS">APP_INDICATOR_GET_CLASS</link>             (obj)
#define             <link linkend="APP-INDICATOR-SIGNAL-NEW-ICON:CAPS">APP_INDICATOR_SIGNAL_NEW_ICON</link>
#define             <link linkend="APP-INDICATOR-SIGNAL-NEW-ATTENTION-ICON:CAPS">APP_INDICATOR_SIGNAL_NEW_ATTENTION_ICON</link>
#define             <link linkend="APP-INDICATOR-SIGNAL-NEW-STATUS:CAPS">APP_INDICATOR_SIGNAL_NEW_STATUS</link>
#define             <link linkend="APP-INDICATOR-SIGNAL-NEW-LABEL:CAPS">APP_INDICATOR_SIGNAL_NEW_LABEL</link>
#define             <link linkend="APP-INDICATOR-SIGNAL-NEW-ICON-THEME-PATH:CAPS">APP_INDICATOR_SIGNAL_NEW_ICON_THEME_PATH</link>
#define             <link linkend="APP-INDICATOR-SIGNAL-CONNECTION-CHANGED:CAPS">APP_INDICATOR_SIGNAL_CONNECTION_CHANGED</link>
#define             <link linkend="APP-INDICATOR-SIGNAL-SCROLL-EVENT:CAPS">APP_INDICATOR_SIGNAL_SCROLL_EVENT</link>
enum                <link linkend="AppIndicatorCategory">AppIndicatorCategory</link>;
enum                <link linkend="AppIndicatorStatus">AppIndicatorStatus</link>;
                    <link linkend="AppIndicatorPrivate">AppIndicatorPrivate</link>;
                    <link linkend="AppIndicator-struct">AppIndicator</link>;
struct              <link linkend="AppIndicatorClass">AppIndicatorClass</link>;
<link linkend="GType"><returnvalue>GType</returnvalue></link>               <link linkend="app-indicator-get-type">app_indicator_get_type</link>              (<parameter><type>void</type></parameter>);
<link linkend="AppIndicator"><returnvalue>AppIndicator</returnvalue></link> *      <link linkend="app-indicator-new">app_indicator_new</link>                   (<parameter>const <link linkend="gchar"><type>gchar</type></link> *id</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_name</parameter>,
                                                         <parameter><link linkend="AppIndicatorCategory"><type>AppIndicatorCategory</type></link> category</parameter>);
<link linkend="AppIndicator"><returnvalue>AppIndicator</returnvalue></link> *      <link linkend="app-indicator-new-with-path">app_indicator_new_with_path</link>         (<parameter>const <link linkend="gchar"><type>gchar</type></link> *id</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_name</parameter>,
                                                         <parameter><link linkend="AppIndicatorCategory"><type>AppIndicatorCategory</type></link> category</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_theme_path</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="app-indicator-set-status">app_indicator_set_status</link>            (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter><link linkend="AppIndicatorStatus"><type>AppIndicatorStatus</type></link> status</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="app-indicator-set-attention-icon">app_indicator_set_attention_icon</link>    (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_name</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="app-indicator-set-attention-icon-full">app_indicator_set_attention_icon_full</link>
                                                        (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_desc</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="app-indicator-set-menu">app_indicator_set_menu</link>              (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter><link linkend="GtkMenu"><type>GtkMenu</type></link> *menu</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="app-indicator-set-icon">app_indicator_set_icon</link>              (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_name</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="app-indicator-set-icon-full">app_indicator_set_icon_full</link>         (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_desc</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="app-indicator-set-icon-theme-path">app_indicator_set_icon_theme_path</link>   (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_theme_path</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="app-indicator-set-label">app_indicator_set_label</link>             (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *label</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *guide</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="app-indicator-set-ordering-index">app_indicator_set_ordering_index</link>    (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter><link linkend="guint32"><type>guint32</type></link> ordering_index</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="app-indicator-set-secondary-activate-target">app_indicator_set_secondary_activate_target</link>
                                                        (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter><link linkend="GtkWidget"><type>GtkWidget</type></link> *menuitem</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="app-indicator-set-title">app_indicator_set_title</link>             (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *title</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="app-indicator-get-id">app_indicator_get_id</link>                (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);
<link linkend="AppIndicatorCategory"><returnvalue>AppIndicatorCategory</returnvalue></link> <link linkend="app-indicator-get-category">app_indicator_get_category</link>         (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);
<link linkend="AppIndicatorStatus"><returnvalue>AppIndicatorStatus</returnvalue></link>  <link linkend="app-indicator-get-status">app_indicator_get_status</link>            (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="app-indicator-get-icon">app_indicator_get_icon</link>              (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="app-indicator-get-icon-desc">app_indicator_get_icon_desc</link>         (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="app-indicator-get-icon-theme-path">app_indicator_get_icon_theme_path</link>   (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="app-indicator-get-attention-icon">app_indicator_get_attention_icon</link>    (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="app-indicator-get-attention-icon-desc">app_indicator_get_attention_icon_desc</link>
                                                        (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);
<link linkend="GtkMenu"><returnvalue>GtkMenu</returnvalue></link> *           <link linkend="app-indicator-get-menu">app_indicator_get_menu</link>              (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="app-indicator-get-label">app_indicator_get_label</link>             (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="app-indicator-get-label-guide">app_indicator_get_label_guide</link>       (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);
<link linkend="guint32"><returnvalue>guint32</returnvalue></link>             <link linkend="app-indicator-get-ordering-index">app_indicator_get_ordering_index</link>    (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);
<link linkend="GtkWidget"><returnvalue>GtkWidget</returnvalue></link> *         <link linkend="app-indicator-get-secondary-activate-target">app_indicator_get_secondary_activate_target</link>
                                                        (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="app-indicator-get-title">app_indicator_get_title</link>             (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="app-indicator-build-menu-from-desktop">app_indicator_build_menu_from_desktop</link>
                                                        (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *desktop_file</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *desktop_profile</parameter>);
</synopsis>
</refsynopsisdiv>
<refsect1 id="libappindicator-app-indicator.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----AppIndicator
</synopsis>
</refsect1>
<refsect1 id="libappindicator-app-indicator.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="AppIndicator--attention-icon-desc">attention-icon-desc</link>&quot;      <link linkend="gchar"><type>gchar</type></link>*                : Read / Write
  &quot;<link linkend="AppIndicator--attention-icon-name">attention-icon-name</link>&quot;      <link linkend="gchar"><type>gchar</type></link>*                : Read / Write
  &quot;<link linkend="AppIndicator--category">category</link>&quot;                 <link linkend="gchar"><type>gchar</type></link>*                : Read / Write / Construct Only
  &quot;<link linkend="AppIndicator--connected">connected</link>&quot;                <link linkend="gboolean"><type>gboolean</type></link>              : Read
  &quot;<link linkend="AppIndicator--dbus-menu-server">dbus-menu-server</link>&quot;         <link linkend="DbusmenuServer"><type>DbusmenuServer</type></link>*       : Read / Write
  &quot;<link linkend="AppIndicator--icon-desc">icon-desc</link>&quot;                <link linkend="gchar"><type>gchar</type></link>*                : Read / Write
  &quot;<link linkend="AppIndicator--icon-name">icon-name</link>&quot;                <link linkend="gchar"><type>gchar</type></link>*                : Read / Write
  &quot;<link linkend="AppIndicator--icon-theme-path">icon-theme-path</link>&quot;          <link linkend="gchar"><type>gchar</type></link>*                : Read / Write / Construct
  &quot;<link linkend="AppIndicator--id">id</link>&quot;                       <link linkend="gchar"><type>gchar</type></link>*                : Read / Write / Construct Only
  &quot;<link linkend="AppIndicator--label">label</link>&quot;                    <link linkend="gchar"><type>gchar</type></link>*                : Read / Write
  &quot;<link linkend="AppIndicator--label-guide">label-guide</link>&quot;              <link linkend="gchar"><type>gchar</type></link>*                : Read / Write
  &quot;<link linkend="AppIndicator--ordering-index">ordering-index</link>&quot;           <link linkend="guint"><type>guint</type></link>                 : Read / Write
  &quot;<link linkend="AppIndicator--status">status</link>&quot;                   <link linkend="gchar"><type>gchar</type></link>*                : Read / Write
  &quot;<link linkend="AppIndicator--title">title</link>&quot;                    <link linkend="gchar"><type>gchar</type></link>*                : Read / Write
</synopsis>
</refsect1>
<refsect1 id="libappindicator-app-indicator.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="AppIndicator-connection-changed">connection-changed</link>&quot;                             : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link>
  &quot;<link linkend="AppIndicator-new-attention-icon">new-attention-icon</link>&quot;                             : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link>
  &quot;<link linkend="AppIndicator-new-icon">new-icon</link>&quot;                                       : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link>
  &quot;<link linkend="AppIndicator-new-icon-theme-path">new-icon-theme-path</link>&quot;                            : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link>
  &quot;<link linkend="AppIndicator-new-label">new-label</link>&quot;                                      : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link>
  &quot;<link linkend="AppIndicator-new-status">new-status</link>&quot;                                     : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link>
  &quot;<link linkend="AppIndicator-scroll-event">scroll-event</link>&quot;                                   : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link>
</synopsis>
</refsect1>

<refsect1 id="libappindicator-app-indicator.description" role="desc">
<title role="desc.title">Description</title>
<para>
An application indicator is a way for an application to put
a menu into the panel on the user's screen.  This allows the
user to interact with the application even though it might
not be visible to the user at the time.  In most cases this
is not a good solution as there are other ways to inform the
user.  It should only be use if persistence is a desired
feature for the user (not for your marketing purpose of
having your logo in the panel).
</para>
</refsect1>
<refsect1 id="libappindicator-app-indicator.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="APP-INDICATOR-TYPE:CAPS" role="macro">
<title>APP_INDICATOR_TYPE</title>
<indexterm zone="APP-INDICATOR-TYPE:CAPS"><primary>APP_INDICATOR_TYPE</primary></indexterm>
<programlisting>#define APP_INDICATOR_TYPE            (app_indicator_get_type ())
</programlisting>
<para>
Get the <link linkend="GType"><type>GType</type></link> for a <link linkend="AppIndicator"><type>AppIndicator</type></link>.
</para></refsect2>
<refsect2 id="APP-INDICATOR:CAPS" role="macro">
<title>APP_INDICATOR()</title>
<indexterm zone="APP-INDICATOR:CAPS"><primary>APP_INDICATOR</primary></indexterm>
<programlisting>#define APP_INDICATOR(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), APP_INDICATOR_TYPE, AppIndicator))
</programlisting>
<para>
Safely convert a <link linkend="GObject"><type>GObject</type></link> into an <link linkend="AppIndicator"><type>AppIndicator</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara>The object to convert</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="APP-INDICATOR-CLASS:CAPS" role="macro">
<title>APP_INDICATOR_CLASS()</title>
<indexterm zone="APP-INDICATOR-CLASS:CAPS"><primary>APP_INDICATOR_CLASS</primary></indexterm>
<programlisting>#define APP_INDICATOR_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), APP_INDICATOR_TYPE, AppIndicatorClass))
</programlisting>
<para>
Safely convert a <link linkend="GObjectClass"><type>GObjectClass</type></link> into a <link linkend="AppIndicatorClass"><type>AppIndicatorClass</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara><link linkend="GObjectClass"><type>GObjectClass</type></link> based class to convert.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="IS-APP-INDICATOR:CAPS" role="macro">
<title>IS_APP_INDICATOR()</title>
<indexterm zone="IS-APP-INDICATOR:CAPS"><primary>IS_APP_INDICATOR</primary></indexterm>
<programlisting>#define IS_APP_INDICATOR(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), APP_INDICATOR_TYPE))
</programlisting>
<para>
Checks to see if <parameter>obj</parameter> is in the object hierarchy of <link linkend="AppIndicator"><type>AppIndicator</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara>An <link linkend="GObject"><type>GObject</type></link> to check</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="IS-APP-INDICATOR-CLASS:CAPS" role="macro">
<title>IS_APP_INDICATOR_CLASS()</title>
<indexterm zone="IS-APP-INDICATOR-CLASS:CAPS"><primary>IS_APP_INDICATOR_CLASS</primary></indexterm>
<programlisting>#define IS_APP_INDICATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), APP_INDICATOR_TYPE))
</programlisting>
<para>
Checks to see if <parameter>klass</parameter> is in the object class hierarchy of <link linkend="AppIndicatorClass"><type>AppIndicatorClass</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara>An <link linkend="GObjectClass"><type>GObjectClass</type></link> to check</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="APP-INDICATOR-GET-CLASS:CAPS" role="macro">
<title>APP_INDICATOR_GET_CLASS()</title>
<indexterm zone="APP-INDICATOR-GET-CLASS:CAPS"><primary>APP_INDICATOR_GET_CLASS</primary></indexterm>
<programlisting>#define APP_INDICATOR_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), APP_INDICATOR_TYPE, AppIndicatorClass))
</programlisting>
<para>
Gets a pointer to the <link linkend="AppIndicatorClass"><type>AppIndicatorClass</type></link> for the object <parameter>obj</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara>A <link linkend="GObject"><type>GObject</type></link> in the class hierarchy of <link linkend="AppIndicator"><type>AppIndicator</type></link>.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="APP-INDICATOR-SIGNAL-NEW-ICON:CAPS" role="macro">
<title>APP_INDICATOR_SIGNAL_NEW_ICON</title>
<indexterm zone="APP-INDICATOR-SIGNAL-NEW-ICON:CAPS"><primary>APP_INDICATOR_SIGNAL_NEW_ICON</primary></indexterm>
<programlisting>#define APP_INDICATOR_SIGNAL_NEW_ICON            "new-icon"
</programlisting>
<para>
String identifier for the <link linkend="AppIndicator-new-icon"><type>"new-icon"</type></link> signal.
</para></refsect2>
<refsect2 id="APP-INDICATOR-SIGNAL-NEW-ATTENTION-ICON:CAPS" role="macro">
<title>APP_INDICATOR_SIGNAL_NEW_ATTENTION_ICON</title>
<indexterm zone="APP-INDICATOR-SIGNAL-NEW-ATTENTION-ICON:CAPS"><primary>APP_INDICATOR_SIGNAL_NEW_ATTENTION_ICON</primary></indexterm>
<programlisting>#define APP_INDICATOR_SIGNAL_NEW_ATTENTION_ICON  "new-attention-icon"
</programlisting>
<para>
String identifier for the <link linkend="AppIndicator-new-attention-icon"><type>"new-attention-icon"</type></link> signal.
</para></refsect2>
<refsect2 id="APP-INDICATOR-SIGNAL-NEW-STATUS:CAPS" role="macro">
<title>APP_INDICATOR_SIGNAL_NEW_STATUS</title>
<indexterm zone="APP-INDICATOR-SIGNAL-NEW-STATUS:CAPS"><primary>APP_INDICATOR_SIGNAL_NEW_STATUS</primary></indexterm>
<programlisting>#define APP_INDICATOR_SIGNAL_NEW_STATUS          "new-status"
</programlisting>
<para>
String identifier for the <link linkend="AppIndicator-new-status"><type>"new-status"</type></link> signal.
</para></refsect2>
<refsect2 id="APP-INDICATOR-SIGNAL-NEW-LABEL:CAPS" role="macro">
<title>APP_INDICATOR_SIGNAL_NEW_LABEL</title>
<indexterm zone="APP-INDICATOR-SIGNAL-NEW-LABEL:CAPS"><primary>APP_INDICATOR_SIGNAL_NEW_LABEL</primary></indexterm>
<programlisting>#define APP_INDICATOR_SIGNAL_NEW_LABEL           "new-label"
</programlisting>
<para>
String identifier for the <link linkend="AppIndicator-new-label"><type>"new-label"</type></link> signal.
</para></refsect2>
<refsect2 id="APP-INDICATOR-SIGNAL-NEW-ICON-THEME-PATH:CAPS" role="macro">
<title>APP_INDICATOR_SIGNAL_NEW_ICON_THEME_PATH</title>
<indexterm zone="APP-INDICATOR-SIGNAL-NEW-ICON-THEME-PATH:CAPS"><primary>APP_INDICATOR_SIGNAL_NEW_ICON_THEME_PATH</primary></indexterm>
<programlisting>#define APP_INDICATOR_SIGNAL_NEW_ICON_THEME_PATH "new-icon-theme-path"
</programlisting>
<para>
String identifier for the <link linkend="AppIndicator-new-icon-theme-path"><type>"new-icon-theme-path"</type></link> signal.
</para></refsect2>
<refsect2 id="APP-INDICATOR-SIGNAL-CONNECTION-CHANGED:CAPS" role="macro">
<title>APP_INDICATOR_SIGNAL_CONNECTION_CHANGED</title>
<indexterm zone="APP-INDICATOR-SIGNAL-CONNECTION-CHANGED:CAPS"><primary>APP_INDICATOR_SIGNAL_CONNECTION_CHANGED</primary></indexterm>
<programlisting>#define APP_INDICATOR_SIGNAL_CONNECTION_CHANGED  "connection-changed"
</programlisting>
<para>
String identifier for the <link linkend="AppIndicator-connection-changed"><type>"connection-changed"</type></link> signal.
</para></refsect2>
<refsect2 id="APP-INDICATOR-SIGNAL-SCROLL-EVENT:CAPS" role="macro">
<title>APP_INDICATOR_SIGNAL_SCROLL_EVENT</title>
<indexterm zone="APP-INDICATOR-SIGNAL-SCROLL-EVENT:CAPS"><primary>APP_INDICATOR_SIGNAL_SCROLL_EVENT</primary></indexterm>
<programlisting>#define APP_INDICATOR_SIGNAL_SCROLL_EVENT        "scroll-event"
</programlisting>
<para>
String identifier for the <link linkend="AppIndicator-scroll-event"><type>"scroll-event"</type></link> signal.
</para></refsect2>
<refsect2 id="AppIndicatorCategory" role="enum">
<title>enum AppIndicatorCategory</title>
<indexterm zone="AppIndicatorCategory"><primary>AppIndicatorCategory</primary></indexterm>
<programlisting>typedef enum {
 /*&lt; prefix=APP_INDICATOR_CATEGORY &gt;*/
	APP_INDICATOR_CATEGORY_APPLICATION_STATUS, /*&lt; nick=ApplicationStatus &gt;*/
	APP_INDICATOR_CATEGORY_COMMUNICATIONS, /*&lt; nick=Communications &gt;*/
	APP_INDICATOR_CATEGORY_SYSTEM_SERVICES, /*&lt; nick=SystemServices &gt;*/
	APP_INDICATOR_CATEGORY_HARDWARE, /*&lt; nick=Hardware &gt;*/
	APP_INDICATOR_CATEGORY_OTHER /*&lt; nick=Other &gt;*/
} AppIndicatorCategory;
</programlisting>
<para>
The category provides grouping for the indicators so that
users can find indicators that are similar together.
</para><variablelist role="enum">
<varlistentry id="APP-INDICATOR-CATEGORY-APPLICATION-STATUS:CAPS" role="constant">
<term><literal>APP_INDICATOR_CATEGORY_APPLICATION_STATUS</literal></term>
<listitem><simpara>The indicator is used to display the status of the application.
</simpara></listitem>
</varlistentry>
<varlistentry id="APP-INDICATOR-CATEGORY-COMMUNICATIONS:CAPS" role="constant">
<term><literal>APP_INDICATOR_CATEGORY_COMMUNICATIONS</literal></term>
<listitem><simpara>The application is used for communication with other people.
</simpara></listitem>
</varlistentry>
<varlistentry id="APP-INDICATOR-CATEGORY-SYSTEM-SERVICES:CAPS" role="constant">
<term><literal>APP_INDICATOR_CATEGORY_SYSTEM_SERVICES</literal></term>
<listitem><simpara>A system indicator relating to something in the user's system.
</simpara></listitem>
</varlistentry>
<varlistentry id="APP-INDICATOR-CATEGORY-HARDWARE:CAPS" role="constant">
<term><literal>APP_INDICATOR_CATEGORY_HARDWARE</literal></term>
<listitem><simpara>An indicator relating to the user's hardware.
</simpara></listitem>
</varlistentry>
<varlistentry id="APP-INDICATOR-CATEGORY-OTHER:CAPS" role="constant">
<term><literal>APP_INDICATOR_CATEGORY_OTHER</literal></term>
<listitem><simpara>Something not defined in this enum, please don't use unless you really need it.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="AppIndicatorStatus" role="enum">
<title>enum AppIndicatorStatus</title>
<indexterm zone="AppIndicatorStatus"><primary>AppIndicatorStatus</primary></indexterm>
<programlisting>typedef enum {
 /*&lt; prefix=APP_INDICATOR_STATUS &gt;*/
	APP_INDICATOR_STATUS_PASSIVE, /*&lt; nick=Passive &gt;*/
	APP_INDICATOR_STATUS_ACTIVE, /*&lt; nick=Active &gt;*/
	APP_INDICATOR_STATUS_ATTENTION /*&lt; nick=NeedsAttention &gt;*/
} AppIndicatorStatus;
</programlisting>
<para>
These are the states that the indicator can be on in
the user's panel.  The indicator by default starts
in the state <parameter>APP_INDICATOR_STATUS_PASSIVE</parameter> and can be
shown by setting it to <parameter>APP_INDICATOR_STATUS_ACTIVE</parameter>.
</para><variablelist role="enum">
<varlistentry id="APP-INDICATOR-STATUS-PASSIVE:CAPS" role="constant">
<term><literal>APP_INDICATOR_STATUS_PASSIVE</literal></term>
<listitem><simpara>The indicator should not be shown to the user.
</simpara></listitem>
</varlistentry>
<varlistentry id="APP-INDICATOR-STATUS-ACTIVE:CAPS" role="constant">
<term><literal>APP_INDICATOR_STATUS_ACTIVE</literal></term>
<listitem><simpara>The indicator should be shown in it's default state.
</simpara></listitem>
</varlistentry>
<varlistentry id="APP-INDICATOR-STATUS-ATTENTION:CAPS" role="constant">
<term><literal>APP_INDICATOR_STATUS_ATTENTION</literal></term>
<listitem><simpara>The indicator should show it's attention icon.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="AppIndicatorPrivate" role="struct">
<title>AppIndicatorPrivate</title>
<indexterm zone="AppIndicatorPrivate"><primary>AppIndicatorPrivate</primary></indexterm>
<programlisting>typedef struct _AppIndicatorPrivate AppIndicatorPrivate;</programlisting>
<para>
Private Fields
<parameter>id</parameter>: The ID of the indicator.  Maps to AppIndicator:id.
<parameter>category</parameter>: Which category the indicator is.  Maps to AppIndicator:category.
<parameter>status</parameter>: The status of the indicator.  Maps to AppIndicator:status.
<parameter>icon_name</parameter>: The name of the icon to use.  Maps to AppIndicator:icon-name.
<parameter>attention_icon_name</parameter>: The name of the attention icon to use.  Maps to AppIndicator:attention-icon-name.
<parameter>menu</parameter>: The menu for this indicator.  Maps to AppIndicator:menu
<parameter>watcher_proxy</parameter>: The proxy connection to the watcher we're connected to.  If we're not connected to one this will be <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</para></refsect2>
<refsect2 id="AppIndicator-struct" role="struct">
<title>AppIndicator</title>
<indexterm zone="AppIndicator-struct"><primary>AppIndicator</primary></indexterm>
<programlisting>typedef struct _AppIndicator AppIndicator;</programlisting>
<para>
A application indicator represents the values that are needed to show a
unique status in the panel for an application.  In general, applications
should try to fit in the other indicators that are available on the
panel before using this.  But, sometimes it is necissary.
</para>
<para>
 Private fields
<parameter>parent</parameter>: Parent object.
<parameter>priv</parameter>: Internal data.
</para></refsect2>
<refsect2 id="AppIndicatorClass" role="struct">
<title>struct AppIndicatorClass</title>
<indexterm zone="AppIndicatorClass"><primary>AppIndicatorClass</primary></indexterm>
<programlisting>struct AppIndicatorClass {
	/* Parent */
	GObjectClass parent_class;

	/* DBus Signals */
	void (* new_icon)               (AppIndicator      *indicator,
	                                 gpointer            user_data);
	void (* new_attention_icon)     (AppIndicator      *indicator,
	                                 gpointer            user_data);
	void (* new_status)             (AppIndicator      *indicator,
	                                 const gchar       *status,
	                                 gpointer            user_data);
	void (* new_icon_theme_path)    (AppIndicator      *indicator,
	                                 const gchar       *icon_theme_path,
	                                 gpointer            user_data);
	void (* new_label)              (AppIndicator       *indicator,
	                                 const gchar        *label,
	                                 const gchar        *guide,
	                                 gpointer            user_data);

	/* Local Signals */
	void (* connection_changed)     (AppIndicator * indicator,
	                                 gboolean          connected,
	                                 gpointer          user_data);

	void (* scroll_event)           (AppIndicator * indicator,
	                                 gint                  delta,
	                                 GdkScrollDirection direction,
	                                 gpointer          user_data);

	void (*app_indicator_reserved_ats)(void);

	/* Overridable Functions */
	GtkStatusIcon * (*fallback)     (AppIndicator * indicator);
	void (*unfallback)              (AppIndicator * indicator,
	                                 GtkStatusIcon * status_icon);

	/* Reserved */
	void (*app_indicator_reserved_1)(void);
	void (*app_indicator_reserved_2)(void);
	void (*app_indicator_reserved_3)(void);
	void (*app_indicator_reserved_4)(void);
	void (*app_indicator_reserved_5)(void);
	void (*app_indicator_reserved_6)(void);
};
</programlisting>
<para>
The signals and external functions that make up the <link linkend="AppIndicator"><type>AppIndicator</type></link>
class object.
</para><variablelist role="struct">
<varlistentry><term><link linkend="GObjectClass"><type>GObjectClass</type></link>&#160;<structfield id="AppIndicatorClass.parent-class">parent_class</structfield>;</term>
<listitem><simpara>Mia familia</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.new-icon">new_icon</structfield>&#160;()</term>
<listitem><simpara>Slot for <link linkend="AppIndicator-new-icon"><type>"new-icon"</type></link>.</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.new-attention-icon">new_attention_icon</structfield>&#160;()</term>
<listitem><simpara>Slot for <link linkend="AppIndicator-new-attention-icon"><type>"new-attention-icon"</type></link>.</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.new-status">new_status</structfield>&#160;()</term>
<listitem><simpara>Slot for <link linkend="AppIndicator-new-status"><type>"new-status"</type></link>.</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.new-icon-theme-path">new_icon_theme_path</structfield>&#160;()</term>
<listitem><simpara>Slot for <link linkend="AppIndicator-new-icon-theme-path"><type>"new-icon-theme-path"</type></link></simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.new-label">new_label</structfield>&#160;()</term>
<listitem><simpara>Slot for <link linkend="AppIndicator-new-label"><type>"new-label"</type></link>.</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.connection-changed">connection_changed</structfield>&#160;()</term>
<listitem><simpara>Slot for <link linkend="AppIndicator-connection-changed"><type>"connection-changed"</type></link>.</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.scroll-event">scroll_event</structfield>&#160;()</term>
<listitem><simpara>Slot for <link linkend="AppIndicator-scroll-event"><type>"scroll-event"</type></link></simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.app-indicator-reserved-ats">app_indicator_reserved_ats</structfield>&#160;()</term>
<listitem><simpara>Reserved for future use.</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.fallback">fallback</structfield>&#160;()</term>
<listitem><simpara>Function that gets called to make a <link linkend="GtkStatusIcon"><type>GtkStatusIcon</type></link> when
there is no Application Indicator area available.</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.unfallback">unfallback</structfield>&#160;()</term>
<listitem><simpara>The function that gets called if an Application
Indicator area appears after the fallback has been created.</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.app-indicator-reserved-1">app_indicator_reserved_1</structfield>&#160;()</term>
<listitem><simpara>Reserved for future use.</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.app-indicator-reserved-2">app_indicator_reserved_2</structfield>&#160;()</term>
<listitem><simpara>Reserved for future use.</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.app-indicator-reserved-3">app_indicator_reserved_3</structfield>&#160;()</term>
<listitem><simpara>Reserved for future use.</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.app-indicator-reserved-4">app_indicator_reserved_4</structfield>&#160;()</term>
<listitem><simpara>Reserved for future use.</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.app-indicator-reserved-5">app_indicator_reserved_5</structfield>&#160;()</term>
<listitem><simpara>Reserved for future use.</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.app-indicator-reserved-6">app_indicator_reserved_6</structfield>&#160;()</term>
<listitem><simpara>Reserved for future use.</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-type" role="function">
<title>app_indicator_get_type ()</title>
<indexterm zone="app-indicator-get-type"><primary>app_indicator_get_type</primary></indexterm>
<programlisting><link linkend="GType"><returnvalue>GType</returnvalue></link>               app_indicator_get_type              (<parameter><type>void</type></parameter>);</programlisting>
<para>
Generates or returns the unique <link linkend="GType"><type>GType</type></link> for <link linkend="AppIndicator"><type>AppIndicator</type></link>.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A unique <link linkend="GType"><type>GType</type></link> for <link linkend="AppIndicator"><type>AppIndicator</type></link> objects.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-new" role="function">
<title>app_indicator_new ()</title>
<indexterm zone="app-indicator-new"><primary>app_indicator_new</primary></indexterm>
<programlisting><link linkend="AppIndicator"><returnvalue>AppIndicator</returnvalue></link> *      app_indicator_new                   (<parameter>const <link linkend="gchar"><type>gchar</type></link> *id</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_name</parameter>,
                                                         <parameter><link linkend="AppIndicatorCategory"><type>AppIndicatorCategory</type></link> category</parameter>);</programlisting>
<para>
Creates a new <link linkend="AppIndicator"><type>AppIndicator</type></link> setting the properties:
<link linkend="AppIndicator--id"><type>"id"</type></link> with <parameter>id</parameter>, <link linkend="AppIndicator--category"><type>"category"</type></link> with <parameter>category</parameter>
and <link linkend="AppIndicator--icon-name"><type>"icon-name"</type></link> with <parameter>icon_name</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>The unique id of the indicator to create.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_name</parameter>&#160;:</term>
<listitem><simpara>The icon name for this indicator</simpara></listitem></varlistentry>
<varlistentry><term><parameter>category</parameter>&#160;:</term>
<listitem><simpara>The category of indicator.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A pointer to a new <link linkend="AppIndicator"><type>AppIndicator</type></link> object.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-new-with-path" role="function">
<title>app_indicator_new_with_path ()</title>
<indexterm zone="app-indicator-new-with-path"><primary>app_indicator_new_with_path</primary></indexterm>
<programlisting><link linkend="AppIndicator"><returnvalue>AppIndicator</returnvalue></link> *      app_indicator_new_with_path         (<parameter>const <link linkend="gchar"><type>gchar</type></link> *id</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_name</parameter>,
                                                         <parameter><link linkend="AppIndicatorCategory"><type>AppIndicatorCategory</type></link> category</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_theme_path</parameter>);</programlisting>
<para>
Creates a new <link linkend="AppIndicator"><type>AppIndicator</type></link> setting the properties:
<link linkend="AppIndicator--id"><type>"id"</type></link> with <parameter>id</parameter>, <link linkend="AppIndicator--category"><type>"category"</type></link> with <parameter>category</parameter>,
<link linkend="AppIndicator--icon-name"><type>"icon-name"</type></link> with <parameter>icon_name</parameter> and <link linkend="AppIndicator--icon-theme-path"><type>"icon-theme-path"</type></link>
with <parameter>icon_theme_path</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>The unique id of the indicator to create.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_name</parameter>&#160;:</term>
<listitem><simpara>The icon name for this indicator</simpara></listitem></varlistentry>
<varlistentry><term><parameter>category</parameter>&#160;:</term>
<listitem><simpara>The category of indicator.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_theme_path</parameter>&#160;:</term>
<listitem><simpara>A custom path for finding icons.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A pointer to a new <link linkend="AppIndicator"><type>AppIndicator</type></link> object.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-set-status" role="function">
<title>app_indicator_set_status ()</title>
<indexterm zone="app-indicator-set-status"><primary>app_indicator_set_status</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                app_indicator_set_status            (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter><link linkend="AppIndicatorStatus"><type>AppIndicatorStatus</type></link> status</parameter>);</programlisting>
<para>
Wrapper function for property <link linkend="AppIndicator--status"><type>"status"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara>The status to set for this indicator</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-set-attention-icon" role="function" condition="deprecated:Use app_indicator_set_attention_icon_full() instead.">
<title>app_indicator_set_attention_icon ()</title>
<indexterm zone="app-indicator-set-attention-icon" role="deprecated"><primary>app_indicator_set_attention_icon</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                app_indicator_set_attention_icon    (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_name</parameter>);</programlisting>
<warning><para><literal>app_indicator_set_attention_icon</literal> is deprecated and should not be used in newly-written code. Use <link linkend="app-indicator-set-attention-icon-full"><function>app_indicator_set_attention_icon_full()</function></link> instead.</para></warning>
<para>
Wrapper for <link linkend="app-indicator-set-attention-icon-full"><function>app_indicator_set_attention_icon_full()</function></link> with a NULL
description.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_name</parameter>&#160;:</term>
<listitem><simpara>The name of the attention icon to set for this indicator</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-set-attention-icon-full" role="function">
<title>app_indicator_set_attention_icon_full ()</title>
<indexterm zone="app-indicator-set-attention-icon-full"><primary>app_indicator_set_attention_icon_full</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                app_indicator_set_attention_icon_full
                                                        (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_desc</parameter>);</programlisting>
<para>
Wrapper function for property <link linkend="AppIndicator--attention-icon-name"><type>"attention-icon-name"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_name</parameter>&#160;:</term>
<listitem><simpara>The name of the attention icon to set for this indicator</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_desc</parameter>&#160;:</term>
<listitem><simpara>A textual description of the icon</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-set-menu" role="function">
<title>app_indicator_set_menu ()</title>
<indexterm zone="app-indicator-set-menu"><primary>app_indicator_set_menu</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                app_indicator_set_menu              (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter><link linkend="GtkMenu"><type>GtkMenu</type></link> *menu</parameter>);</programlisting>
<para>
Sets the menu that should be shown when the Application Indicator
is clicked on in the panel.  An application indicator will not
be rendered unless it has a menu.
</para>
<para>
Wrapper function for property <link linkend="AppIndicator--menu"><type>"menu"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link></simpara></listitem></varlistentry>
<varlistentry><term><parameter>menu</parameter>&#160;:</term>
<listitem><simpara>A <link linkend="GtkMenu"><type>GtkMenu</type></link> to set. <emphasis role="annotation">[<acronym>allow-none</acronym>]</emphasis></simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-set-icon" role="function" condition="deprecated:Use app_indicator_set_icon_full()">
<title>app_indicator_set_icon ()</title>
<indexterm zone="app-indicator-set-icon" role="deprecated"><primary>app_indicator_set_icon</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                app_indicator_set_icon              (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_name</parameter>);</programlisting>
<warning><para><literal>app_indicator_set_icon</literal> is deprecated and should not be used in newly-written code. Use <link linkend="app-indicator-set-icon-full"><function>app_indicator_set_icon_full()</function></link></para></warning>
<para>
Wrapper function for <link linkend="app-indicator-set-icon-full"><function>app_indicator_set_icon_full()</function></link> with a NULL
description.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_name</parameter>&#160;:</term>
<listitem><simpara>The icon name to set.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-set-icon-full" role="function">
<title>app_indicator_set_icon_full ()</title>
<indexterm zone="app-indicator-set-icon-full"><primary>app_indicator_set_icon_full</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                app_indicator_set_icon_full         (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_desc</parameter>);</programlisting>
<para>
Sets the default icon to use when the status is active but
not set to attention.  In most cases, this should be the
application icon for the program.
</para>
<para>
Wrapper function for property <link linkend="AppIndicator--icon-name"><type>"icon-name"</type></link> and
<link linkend="AppIndicator-icon-desc"><type>"icon-desc"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_name</parameter>&#160;:</term>
<listitem><simpara>The icon name to set.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_desc</parameter>&#160;:</term>
<listitem><simpara>A textual description of the icon for accessibility</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-set-icon-theme-path" role="function">
<title>app_indicator_set_icon_theme_path ()</title>
<indexterm zone="app-indicator-set-icon-theme-path"><primary>app_indicator_set_icon_theme_path</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                app_indicator_set_icon_theme_path   (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_theme_path</parameter>);</programlisting>
<para>
Sets the path to use when searching for icons.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_theme_path</parameter>&#160;:</term>
<listitem><simpara>The icon theme path to set.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-set-label" role="function">
<title>app_indicator_set_label ()</title>
<indexterm zone="app-indicator-set-label"><primary>app_indicator_set_label</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                app_indicator_set_label             (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *label</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *guide</parameter>);</programlisting>
<para>
This is a wrapper function for the <link linkend="AppIndicator--label"><type>"label"</type></link> and
<link linkend="AppIndicator--guide"><type>"guide"</type></link> properties.  This function can take <link linkend="NULL:CAPS"><type>NULL</type></link>
as either <parameter>label</parameter> or <parameter>guide</parameter> and will clear the entries.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><parameter>label</parameter>&#160;:</term>
<listitem><simpara>The label to show next to the icon.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>guide</parameter>&#160;:</term>
<listitem><simpara>A guide to size the label correctly.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-set-ordering-index" role="function">
<title>app_indicator_set_ordering_index ()</title>
<indexterm zone="app-indicator-set-ordering-index"><primary>app_indicator_set_ordering_index</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                app_indicator_set_ordering_index    (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter><link linkend="guint32"><type>guint32</type></link> ordering_index</parameter>);</programlisting>
<para>
Sets the ordering index for the app indicator which effects the
placement of it on the panel.  For almost all app indicator
this is not the function you're looking for.
</para>
<para>
Wrapper function for property <link linkend="AppIndicator--ordering-index"><type>"ordering-index"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link></simpara></listitem></varlistentry>
<varlistentry><term><parameter>ordering_index</parameter>&#160;:</term>
<listitem><simpara>A value for the ordering of this app indicator</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-set-secondary-activate-target" role="function">
<title>app_indicator_set_secondary_activate_target ()</title>
<indexterm zone="app-indicator-set-secondary-activate-target"><primary>app_indicator_set_secondary_activate_target</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                app_indicator_set_secondary_activate_target
                                                        (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter><link linkend="GtkWidget"><type>GtkWidget</type></link> *menuitem</parameter>);</programlisting>
<para>
Set the <parameter>menuitem</parameter> to be activated when a secondary activation event (i.e. a
middle-click) is emitted over the <link linkend="AppIndicator"><type>AppIndicator</type></link> icon/label.
</para>
<para>
The <parameter>menuitem</parameter> can be also a complex <link linkend="GtkWidget"><type>GtkWidget</type></link>, but to get activated when
a secondary activation occurs in the <link linkend="Appindicator"><type>Appindicator</type></link>, it must be a visible and
active child (or inner-child) of the <link linkend="AppIndicator--menu"><type>"menu"</type></link>.
</para>
<para>
Setting <parameter>menuitem</parameter> to <link linkend="NULL:CAPS"><literal>NULL</literal></link> causes to disable this feature.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link></simpara></listitem></varlistentry>
<varlistentry><term><parameter>menuitem</parameter>&#160;:</term>
<listitem><simpara>A <link linkend="GtkWidget"><type>GtkWidget</type></link> to be activated on secondary activation. <emphasis role="annotation">[<acronym>allow-none</acronym>]</emphasis></simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-set-title" role="function" condition="since:0.5">
<title>app_indicator_set_title ()</title>
<indexterm zone="app-indicator-set-title" role="0.5"><primary>app_indicator_set_title</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                app_indicator_set_title             (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *title</parameter>);</programlisting>
<para>
Sets the title of the application indicator, or how it should be referred
in a human readable form.  This string should be UTF-8 and localized as it
expected that users will set it.
</para>
<para>
In the Unity desktop the most prominent place that this is show will be
in the HUD.  HUD listings for this application indicator will start with
the title as the first part of the line for the menu items.
</para>
<para>
Setting <parameter>title</parameter> to <link linkend="NULL:CAPS"><literal>NULL</literal></link> removes the title.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link></simpara></listitem></varlistentry>
<varlistentry><term><parameter>title</parameter>&#160;:</term>
<listitem><simpara>Title of the app indicator. <emphasis role="annotation">[<acronym>allow-none</acronym>]</emphasis></simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.5</para></refsect2>
<refsect2 id="app-indicator-get-id" role="function">
<title>app_indicator_get_id ()</title>
<indexterm zone="app-indicator-get-id"><primary>app_indicator_get_id</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       app_indicator_get_id                (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);</programlisting>
<para>
Wrapper function for property <link linkend="AppIndicator--id"><type>"id"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The current ID</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-category" role="function">
<title>app_indicator_get_category ()</title>
<indexterm zone="app-indicator-get-category"><primary>app_indicator_get_category</primary></indexterm>
<programlisting><link linkend="AppIndicatorCategory"><returnvalue>AppIndicatorCategory</returnvalue></link> app_indicator_get_category         (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);</programlisting>
<para>
Wrapper function for property <link linkend="AppIndicator--category"><type>"category"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The current category.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-status" role="function">
<title>app_indicator_get_status ()</title>
<indexterm zone="app-indicator-get-status"><primary>app_indicator_get_status</primary></indexterm>
<programlisting><link linkend="AppIndicatorStatus"><returnvalue>AppIndicatorStatus</returnvalue></link>  app_indicator_get_status            (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);</programlisting>
<para>
Wrapper function for property <link linkend="AppIndicator--status"><type>"status"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The current status.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-icon" role="function">
<title>app_indicator_get_icon ()</title>
<indexterm zone="app-indicator-get-icon"><primary>app_indicator_get_icon</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       app_indicator_get_icon              (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);</programlisting>
<para>
Wrapper function for property <link linkend="AppIndicator--icon-name"><type>"icon-name"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The current icon name.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-icon-desc" role="function">
<title>app_indicator_get_icon_desc ()</title>
<indexterm zone="app-indicator-get-icon-desc"><primary>app_indicator_get_icon_desc</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       app_indicator_get_icon_desc         (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);</programlisting>
<para>
Wrapper function for property <link linkend="AppIndicator--icon-desc"><type>"icon-desc"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The current icon description.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-icon-theme-path" role="function">
<title>app_indicator_get_icon_theme_path ()</title>
<indexterm zone="app-indicator-get-icon-theme-path"><primary>app_indicator_get_icon_theme_path</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       app_indicator_get_icon_theme_path   (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);</programlisting>
<para>
Wrapper function for property <link linkend="AppIndicator--icon-theme-path"><type>"icon-theme-path"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The current icon theme path.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-attention-icon" role="function">
<title>app_indicator_get_attention_icon ()</title>
<indexterm zone="app-indicator-get-attention-icon"><primary>app_indicator_get_attention_icon</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       app_indicator_get_attention_icon    (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);</programlisting>
<para>
Wrapper function for property <link linkend="AppIndicator--attention-icon-name"><type>"attention-icon-name"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The current attention icon name.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-attention-icon-desc" role="function">
<title>app_indicator_get_attention_icon_desc ()</title>
<indexterm zone="app-indicator-get-attention-icon-desc"><primary>app_indicator_get_attention_icon_desc</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       app_indicator_get_attention_icon_desc
                                                        (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);</programlisting>
<para>
Wrapper function for property <link linkend="AppIndicator--attention-icon-desc"><type>"attention-icon-desc"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The current attention icon description.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-menu" role="function">
<title>app_indicator_get_menu ()</title>
<indexterm zone="app-indicator-get-menu"><primary>app_indicator_get_menu</primary></indexterm>
<programlisting><link linkend="GtkMenu"><returnvalue>GtkMenu</returnvalue></link> *           app_indicator_get_menu              (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);</programlisting>
<para>
Gets the menu being used for this application indicator.
Wrapper function for property <link linkend="AppIndicator--menu"><type>"menu"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A <link linkend="GtkMenu"><type>GtkMenu</type></link> object or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if one hasn't been set. <emphasis role="annotation">[<acronym>transfer none</acronym>]</emphasis></simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-label" role="function">
<title>app_indicator_get_label ()</title>
<indexterm zone="app-indicator-get-label"><primary>app_indicator_get_label</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       app_indicator_get_label             (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);</programlisting>
<para>
Wrapper function for property <link linkend="AppIndicator--label"><type>"label"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The current label.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-label-guide" role="function">
<title>app_indicator_get_label_guide ()</title>
<indexterm zone="app-indicator-get-label-guide"><primary>app_indicator_get_label_guide</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       app_indicator_get_label_guide       (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);</programlisting>
<para>
Wrapper function for property <link linkend="AppIndicator--label-guide"><type>"label-guide"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The current label guide.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-ordering-index" role="function">
<title>app_indicator_get_ordering_index ()</title>
<indexterm zone="app-indicator-get-ordering-index"><primary>app_indicator_get_ordering_index</primary></indexterm>
<programlisting><link linkend="guint32"><returnvalue>guint32</returnvalue></link>             app_indicator_get_ordering_index    (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);</programlisting>
<para>
Wrapper function for property <link linkend="AppIndicator--ordering-index"><type>"ordering-index"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The current ordering index.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-secondary-activate-target" role="function">
<title>app_indicator_get_secondary_activate_target ()</title>
<indexterm zone="app-indicator-get-secondary-activate-target"><primary>app_indicator_get_secondary_activate_target</primary></indexterm>
<programlisting><link linkend="GtkWidget"><returnvalue>GtkWidget</returnvalue></link> *         app_indicator_get_secondary_activate_target
                                                        (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);</programlisting>
<para>
Gets the menuitem being called on secondary-activate event.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A <link linkend="GtkWidget"><type>GtkWidget</type></link> object or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if none has been set. <emphasis role="annotation">[<acronym>transfer none</acronym>]</emphasis></simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-title" role="function" condition="since:0.5">
<title>app_indicator_get_title ()</title>
<indexterm zone="app-indicator-get-title" role="0.5"><primary>app_indicator_get_title</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       app_indicator_get_title             (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);</programlisting>
<para>
Gets the title of the application indicator.  See the function
<link linkend="app-indicator-set-title"><function>app_indicator_set_title()</function></link> for information on the title.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The current title.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.5</para></refsect2>
<refsect2 id="app-indicator-build-menu-from-desktop" role="function">
<title>app_indicator_build_menu_from_desktop ()</title>
<indexterm zone="app-indicator-build-menu-from-desktop"><primary>app_indicator_build_menu_from_desktop</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                app_indicator_build_menu_from_desktop
                                                        (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *desktop_file</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *desktop_profile</parameter>);</programlisting>
<para>
This function allows for building the Application Indicator menu
from a static desktop file.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use</simpara></listitem></varlistentry>
<varlistentry><term><parameter>desktop_file</parameter>&#160;:</term>
<listitem><simpara>A path to the desktop file to build the menu from</simpara></listitem></varlistentry>
<varlistentry><term><parameter>desktop_profile</parameter>&#160;:</term>
<listitem><simpara>Which entries should be used from the desktop file</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 id="libappindicator-app-indicator.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="AppIndicator--attention-icon-desc" role="property"><title>The <literal>&quot;attention-icon-desc&quot;</literal> property</title>
<indexterm zone="AppIndicator--attention-icon-desc"><primary>AppIndicator:attention-icon-desc</primary></indexterm>
<programlisting>  &quot;attention-icon-desc&quot;      <link linkend="gchar"><type>gchar</type></link>*                : Read / Write</programlisting>
<para>
If the indicator sets it's status to <link linkend="APP-INDICATOR-STATUS-ATTENTION:CAPS"><literal>APP_INDICATOR_STATUS_ATTENTION</literal></link>
then this textual description of the icon shown.
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="AppIndicator--attention-icon-name" role="property"><title>The <literal>&quot;attention-icon-name&quot;</literal> property</title>
<indexterm zone="AppIndicator--attention-icon-name"><primary>AppIndicator:attention-icon-name</primary></indexterm>
<programlisting>  &quot;attention-icon-name&quot;      <link linkend="gchar"><type>gchar</type></link>*                : Read / Write</programlisting>
<para>
If the indicator sets it's status to <link linkend="APP-INDICATOR-STATUS-ATTENTION:CAPS"><literal>APP_INDICATOR_STATUS_ATTENTION</literal></link>
then this icon is shown.
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="AppIndicator--category" role="property"><title>The <literal>&quot;category&quot;</literal> property</title>
<indexterm zone="AppIndicator--category"><primary>AppIndicator:category</primary></indexterm>
<programlisting>  &quot;category&quot;                 <link linkend="gchar"><type>gchar</type></link>*                : Read / Write / Construct Only</programlisting>
<para>
The type of indicator that this represents.  Please don't use 'Other'.
Defaults to 'ApplicationStatus'.
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="AppIndicator--connected" role="property"><title>The <literal>&quot;connected&quot;</literal> property</title>
<indexterm zone="AppIndicator--connected"><primary>AppIndicator:connected</primary></indexterm>
<programlisting>  &quot;connected&quot;                <link linkend="gboolean"><type>gboolean</type></link>              : Read</programlisting>
<para>
Pretty simple, <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if we have a reasonable expectation of being 
displayed through this object. You should hide your TrayIcon if so.
</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="AppIndicator--dbus-menu-server" role="property"><title>The <literal>&quot;dbus-menu-server&quot;</literal> property</title>
<indexterm zone="AppIndicator--dbus-menu-server"><primary>AppIndicator:dbus-menu-server</primary></indexterm>
<programlisting>  &quot;dbus-menu-server&quot;         <link linkend="DbusmenuServer"><type>DbusmenuServer</type></link>*       : Read / Write</programlisting>
<para>
A way to get the internal dbusmenu server if it is available.
This should only be used for testing.
</para></refsect2>
<refsect2 id="AppIndicator--icon-desc" role="property"><title>The <literal>&quot;icon-desc&quot;</literal> property</title>
<indexterm zone="AppIndicator--icon-desc"><primary>AppIndicator:icon-desc</primary></indexterm>
<programlisting>  &quot;icon-desc&quot;                <link linkend="gchar"><type>gchar</type></link>*                : Read / Write</programlisting>
<para>
The description of the regular icon that is shown for the indicator.
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="AppIndicator--icon-name" role="property"><title>The <literal>&quot;icon-name&quot;</literal> property</title>
<indexterm zone="AppIndicator--icon-name"><primary>AppIndicator:icon-name</primary></indexterm>
<programlisting>  &quot;icon-name&quot;                <link linkend="gchar"><type>gchar</type></link>*                : Read / Write</programlisting>
<para>
The name of the regular icon that is shown for the indicator.
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="AppIndicator--icon-theme-path" role="property"><title>The <literal>&quot;icon-theme-path&quot;</literal> property</title>
<indexterm zone="AppIndicator--icon-theme-path"><primary>AppIndicator:icon-theme-path</primary></indexterm>
<programlisting>  &quot;icon-theme-path&quot;          <link linkend="gchar"><type>gchar</type></link>*                : Read / Write / Construct</programlisting>
<para>
An additional place to look for icon names that may be installed by the
application.
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="AppIndicator--id" role="property"><title>The <literal>&quot;id&quot;</literal> property</title>
<indexterm zone="AppIndicator--id"><primary>AppIndicator:id</primary></indexterm>
<programlisting>  &quot;id&quot;                       <link linkend="gchar"><type>gchar</type></link>*                : Read / Write / Construct Only</programlisting>
<para>
The ID for this indicator, which should be unique, but used consistently
by this program and its indicator.
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="AppIndicator--label" role="property"><title>The <literal>&quot;label&quot;</literal> property</title>
<indexterm zone="AppIndicator--label"><primary>AppIndicator:label</primary></indexterm>
<programlisting>  &quot;label&quot;                    <link linkend="gchar"><type>gchar</type></link>*                : Read / Write</programlisting>
<para>
A label that can be shown next to the string in the application
indicator.  The label will not be shown unless there is an icon
as well.  The label is useful for numerical and other frequently
updated information.  In general, it shouldn't be shown unless a
user requests it as it can take up a significant amount of space
on the user's panel.  This may not be shown in all visualizations.
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="AppIndicator--label-guide" role="property"><title>The <literal>&quot;label-guide&quot;</literal> property</title>
<indexterm zone="AppIndicator--label-guide"><primary>AppIndicator:label-guide</primary></indexterm>
<programlisting>  &quot;label-guide&quot;              <link linkend="gchar"><type>gchar</type></link>*                : Read / Write</programlisting>
<para>
An optional string to provide guidance to the panel on how big
the <link linkend="AppIndicator--label"><type>"label"</type></link> string could get.  If this is set correctly
then the panel should never 'jiggle' as the string adjusts through
out the range of options.  For instance, if you were providing a
percentage like "54% thrust" in <link linkend="AppIndicator--label"><type>"label"</type></link> you'd want to
set this string to "100% thrust" to ensure space when Scotty can
get you enough power.
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="AppIndicator--ordering-index" role="property"><title>The <literal>&quot;ordering-index&quot;</literal> property</title>
<indexterm zone="AppIndicator--ordering-index"><primary>AppIndicator:ordering-index</primary></indexterm>
<programlisting>  &quot;ordering-index&quot;           <link linkend="guint"><type>guint</type></link>                 : Read / Write</programlisting>
<para>
The ordering index is an odd parameter, and if you think you don't need
it you're probably right.  In general, the application indicator try
to place the applications in a recreatable place taking into account
which category they're in to try and group them.  But, there are some
cases where you'd want to ensure indicators are next to each other.
To do that you can override the generated ordering index and replace it
with a new one.  Again, you probably don't want to be doing this, but
in case you do, this is the way.
</para><para>Default value: 0</para>
</refsect2>
<refsect2 id="AppIndicator--status" role="property"><title>The <literal>&quot;status&quot;</literal> property</title>
<indexterm zone="AppIndicator--status"><primary>AppIndicator:status</primary></indexterm>
<programlisting>  &quot;status&quot;                   <link linkend="gchar"><type>gchar</type></link>*                : Read / Write</programlisting>
<para>
Whether the indicator is shown or requests attention. Defaults to
'Passive'.
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="AppIndicator--title" role="property"><title>The <literal>&quot;title&quot;</literal> property</title>
<indexterm zone="AppIndicator--title"><primary>AppIndicator:title</primary></indexterm>
<programlisting>  &quot;title&quot;                    <link linkend="gchar"><type>gchar</type></link>*                : Read / Write</programlisting>
<para>
Provides a way to refer to this application indicator in a human
readable form.  This is used in the Unity desktop in the HUD as
the first part of the menu entries to distinguish them from the
focused application's entries.
</para><para>Default value: NULL</para>
</refsect2>

</refsect1>
<refsect1 id="libappindicator-app-indicator.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="AppIndicator-connection-changed" role="signal"><title>The <literal>&quot;connection-changed&quot;</literal> signal</title>
<indexterm zone="AppIndicator-connection-changed"><primary>AppIndicator::connection-changed</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="AppIndicator"><type>AppIndicator</type></link> *arg0,
                                                        <link linkend="gboolean"><type>gboolean</type></link>      arg1,
                                                        <link linkend="gpointer"><type>gpointer</type></link>      user_data)      : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link></programlisting>
<para>
Signaled when we connect to a watcher, or when it drops away.
</para><variablelist role="params">
<varlistentry><term><parameter>arg0</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>Whether we're connected or not</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="AppIndicator-new-attention-icon" role="signal"><title>The <literal>&quot;new-attention-icon&quot;</literal> signal</title>
<indexterm zone="AppIndicator-new-attention-icon"><primary>AppIndicator::new-attention-icon</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="AppIndicator"><type>AppIndicator</type></link> *arg0,
                                                        <link linkend="gpointer"><type>gpointer</type></link>      user_data)      : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link></programlisting>
<para>
Emitted when <link linkend="AppIndicator--attention-icon-name"><type>"attention-icon-name"</type></link> is changed
</para><variablelist role="params">
<varlistentry><term><parameter>arg0</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="AppIndicator-new-icon" role="signal"><title>The <literal>&quot;new-icon&quot;</literal> signal</title>
<indexterm zone="AppIndicator-new-icon"><primary>AppIndicator::new-icon</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="AppIndicator"><type>AppIndicator</type></link> *arg0,
                                                        <link linkend="gpointer"><type>gpointer</type></link>      user_data)      : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link></programlisting>
<para>
when <link linkend="AppIndicator--icon-name"><type>"icon-name"</type></link> is changed
</para><variablelist role="params">
<varlistentry><term><parameter>arg0</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="AppIndicator-new-icon-theme-path" role="signal"><title>The <literal>&quot;new-icon-theme-path&quot;</literal> signal</title>
<indexterm zone="AppIndicator-new-icon-theme-path"><primary>AppIndicator::new-icon-theme-path</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="AppIndicator"><type>AppIndicator</type></link> *arg0,
                                                        <link linkend="gchar"><type>gchar</type></link>        *arg1,
                                                        <link linkend="gpointer"><type>gpointer</type></link>      user_data)      : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link></programlisting>
<para>
Signaled when there is a new icon set for the
object.
</para><variablelist role="params">
<varlistentry><term><parameter>arg0</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="AppIndicator-new-label" role="signal"><title>The <literal>&quot;new-label&quot;</literal> signal</title>
<indexterm zone="AppIndicator-new-label"><primary>AppIndicator::new-label</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="AppIndicator"><type>AppIndicator</type></link> *arg0,
                                                        <link linkend="gchar"><type>gchar</type></link>        *arg1,
                                                        <link linkend="gchar"><type>gchar</type></link>        *arg1,
                                                        <link linkend="gpointer"><type>gpointer</type></link>      user_data)      : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link></programlisting>
<para>
Emitted when either <link linkend="AppIndicator--label"><type>"label"</type></link> or <link linkend="AppIndicator--label-guide"><type>"label-guide"</type></link> are
changed.
</para><variablelist role="params">
<varlistentry><term><parameter>arg0</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>The string for the label</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>The string for the guide</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="AppIndicator-new-status" role="signal"><title>The <literal>&quot;new-status&quot;</literal> signal</title>
<indexterm zone="AppIndicator-new-status"><primary>AppIndicator::new-status</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="AppIndicator"><type>AppIndicator</type></link> *arg0,
                                                        <link linkend="gchar"><type>gchar</type></link>        *arg1,
                                                        <link linkend="gpointer"><type>gpointer</type></link>      user_data)      : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link></programlisting>
<para>
Emitted when <link linkend="AppIndicator--status"><type>"status"</type></link> is changed
</para><variablelist role="params">
<varlistentry><term><parameter>arg0</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>The string value of the <link linkend="AppIndicatorStatus"><type>AppIndicatorStatus</type></link> enum.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="AppIndicator-scroll-event" role="signal"><title>The <literal>&quot;scroll-event&quot;</literal> signal</title>
<indexterm zone="AppIndicator-scroll-event"><primary>AppIndicator::scroll-event</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="AppIndicator"><type>AppIndicator</type></link> *arg0,
                                                        <link linkend="gint"><type>gint</type></link>          arg1,
                                                        <link linkend="guint"><type>guint</type></link>         arg2,
                                                        <link linkend="gpointer"><type>gpointer</type></link>      user_data)      : <link linkend="G-SIGNAL-RUN-LAST:CAPS"><literal>Run Last</literal></link></programlisting>
<para>
Signaled when the <link linkend="AppIndicator"><type>AppIndicator</type></link> receives a scroll event.
</para><variablelist role="params">
<varlistentry><term><parameter>arg0</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>How many steps the scroll wheel has taken</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg2</parameter>&#160;:</term>
<listitem><simpara>(type Gdk.ScrollDirection) Which direction the wheel went in</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>

</refentry>
